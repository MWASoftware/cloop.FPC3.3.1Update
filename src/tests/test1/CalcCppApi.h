// This file was autogenerated by cloop - Cross Language Object Oriented Programming

#ifndef CALC_CPP_API_H
#define CALC_CPP_API_H

#include <stdint.h>

#ifndef CLOOP_CARG
#define CLOOP_CARG
#endif


template <typename Policy>
class CalcApi
{
private:
	class DoNotInherit
	{
	};

	template <typename T>
	class Inherit : public T
	{
	public:
		Inherit(DoNotInherit = DoNotInherit())
			: T(DoNotInherit())
		{
		}
	};

public:
	// Forward interfaces declarations

	class IDisposable;
	class IStatus;
	class IFactory;
	class ICalculator;
	class ICalculator2;

	// Interfaces declarations

	class IDisposable
	{
	public:
		struct VTable
		{
			void* cloopDummy[1];
			uintptr_t version;
			void (CLOOP_CARG *dispose)(IDisposable* self) throw();
		};

		void* cloopDummy[1];
		VTable* cloopVTable;

	protected:
		IDisposable(DoNotInherit)
		{
		}

		~IDisposable()
		{
		}

	public:
		static const unsigned VERSION = 1;

		void dispose()
		{
			static_cast<VTable*>(this->cloopVTable)->dispose(this);
		}
	};

	class IStatus : public IDisposable
	{
	public:
		struct VTable : public IDisposable::VTable
		{
			int (CLOOP_CARG *getCode)(const IStatus* self) throw();
			void (CLOOP_CARG *setCode)(IStatus* self, int code) throw();
		};

	protected:
		IStatus(DoNotInherit)
			: IDisposable(DoNotInherit())
		{
		}

		~IStatus()
		{
		}

	public:
		static const unsigned VERSION = 2;

		static const int ERROR_1 = 1;
		static const int ERROR_2 = 2;
		static const int ERROR_12 = IStatus::ERROR_1 | IStatus::ERROR_2;

		int getCode() const
		{
			int ret = static_cast<VTable*>(this->cloopVTable)->getCode(this);
			return ret;
		}

		void setCode(int code)
		{
			static_cast<VTable*>(this->cloopVTable)->setCode(this, code);
		}
	};

	class IFactory : public IDisposable
	{
	public:
		struct VTable : public IDisposable::VTable
		{
			IStatus* (CLOOP_CARG *createStatus)(IFactory* self) throw();
			ICalculator* (CLOOP_CARG *createCalculator)(IFactory* self, IStatus* status) throw();
			ICalculator2* (CLOOP_CARG *createCalculator2)(IFactory* self, IStatus* status) throw();
			ICalculator* (CLOOP_CARG *createBrokenCalculator)(IFactory* self, IStatus* status) throw();
		};

	protected:
		IFactory(DoNotInherit)
			: IDisposable(DoNotInherit())
		{
		}

		~IFactory()
		{
		}

	public:
		static const unsigned VERSION = 2;

		IStatus* createStatus()
		{
			IStatus* ret = static_cast<VTable*>(this->cloopVTable)->createStatus(this);
			return ret;
		}

		ICalculator* createCalculator(IStatus* status)
		{
			typename Policy::IStatus status2(status);
			ICalculator* ret = static_cast<VTable*>(this->cloopVTable)->createCalculator(this, status2);
			Policy::checkException(status2);
			return ret;
		}

		ICalculator2* createCalculator2(IStatus* status)
		{
			typename Policy::IStatus status2(status);
			ICalculator2* ret = static_cast<VTable*>(this->cloopVTable)->createCalculator2(this, status2);
			Policy::checkException(status2);
			return ret;
		}

		ICalculator* createBrokenCalculator(IStatus* status)
		{
			typename Policy::IStatus status2(status);
			ICalculator* ret = static_cast<VTable*>(this->cloopVTable)->createBrokenCalculator(this, status2);
			Policy::checkException(status2);
			return ret;
		}
	};

	class ICalculator : public IDisposable
	{
	public:
		struct VTable : public IDisposable::VTable
		{
			int (CLOOP_CARG *sum)(const ICalculator* self, IStatus* status, int n1, int n2) throw();
			int (CLOOP_CARG *getMemory)(const ICalculator* self) throw();
			void (CLOOP_CARG *setMemory)(ICalculator* self, int n) throw();
			void (CLOOP_CARG *sumAndStore)(ICalculator* self, IStatus* status, int n1, int n2) throw();
		};

	protected:
		ICalculator(DoNotInherit)
			: IDisposable(DoNotInherit())
		{
		}

		~ICalculator()
		{
		}

	public:
		static const unsigned VERSION = 4;

		int sum(IStatus* status, int n1, int n2) const
		{
			typename Policy::IStatus status2(status);
			int ret = static_cast<VTable*>(this->cloopVTable)->sum(this, status2, n1, n2);
			Policy::checkException(status2);
			return ret;
		}

		int getMemory() const
		{
			if (!Policy::template checkVersion<3>(this, 0))
			{
				return IStatus::ERROR_1;
			}
			int ret = static_cast<VTable*>(this->cloopVTable)->getMemory(this);
			return ret;
		}

		void setMemory(int n)
		{
			if (!Policy::template checkVersion<3>(this, 0))
			{
				return;
			}
			static_cast<VTable*>(this->cloopVTable)->setMemory(this, n);
		}

		void sumAndStore(IStatus* status, int n1, int n2)
		{
			typename Policy::IStatus status2(status);
			if (!Policy::template checkVersion<4>(this, status2))
			{
				Policy::checkException(status2);
				return;
			}
			static_cast<VTable*>(this->cloopVTable)->sumAndStore(this, status2, n1, n2);
			Policy::checkException(status2);
		}
	};

	class ICalculator2 : public ICalculator
	{
	public:
		struct VTable : public ICalculator::VTable
		{
			int (CLOOP_CARG *multiply)(const ICalculator2* self, IStatus* status, int n1, int n2) throw();
			void (CLOOP_CARG *copyMemory)(ICalculator2* self, const ICalculator* calculator) throw();
			void (CLOOP_CARG *copyMemory2)(ICalculator2* self, const int* address) throw();
		};

	protected:
		ICalculator2(DoNotInherit)
			: ICalculator(DoNotInherit())
		{
		}

		~ICalculator2()
		{
		}

	public:
		static const unsigned VERSION = 6;

		int multiply(IStatus* status, int n1, int n2) const
		{
			typename Policy::IStatus status2(status);
			int ret = static_cast<VTable*>(this->cloopVTable)->multiply(this, status2, n1, n2);
			Policy::checkException(status2);
			return ret;
		}

		void copyMemory(const ICalculator* calculator)
		{
			static_cast<VTable*>(this->cloopVTable)->copyMemory(this, calculator);
		}

		void copyMemory2(const int* address)
		{
			if (!Policy::template checkVersion<6>(this, 0))
			{
				return;
			}
			static_cast<VTable*>(this->cloopVTable)->copyMemory2(this, address);
		}
	};

	// Interfaces implementations

	template <typename Name, typename Base>
	class IDisposableBaseImpl : public Base
	{
	public:
		typedef IDisposable Declaration;

		IDisposableBaseImpl(DoNotInherit = DoNotInherit())
		{
			static struct VTableImpl : Base::VTable
			{
				VTableImpl()
				{
					this->version = Base::VERSION;
					this->dispose = &Name::cloopdisposeDispatcher;
				}
			} vTable;

			this->cloopVTable = &vTable;
		}

		static void CLOOP_CARG cloopdisposeDispatcher(IDisposable* self) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::dispose();
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}
	};

	template <typename Name, typename Base = Inherit<IDisposable> >
	class IDisposableImpl : public IDisposableBaseImpl<Name, Base>
	{
	protected:
		IDisposableImpl(DoNotInherit = DoNotInherit())
		{
		}

	public:
		virtual ~IDisposableImpl()
		{
		}

		virtual void dispose() = 0;
	};

	template <typename Name, typename Base>
	class IStatusBaseImpl : public Base
	{
	public:
		typedef IStatus Declaration;

		IStatusBaseImpl(DoNotInherit = DoNotInherit())
		{
			static struct VTableImpl : Base::VTable
			{
				VTableImpl()
				{
					this->version = Base::VERSION;
					this->dispose = &Name::cloopdisposeDispatcher;
					this->getCode = &Name::cloopgetCodeDispatcher;
					this->setCode = &Name::cloopsetCodeDispatcher;
				}
			} vTable;

			this->cloopVTable = &vTable;
		}

		static int CLOOP_CARG cloopgetCodeDispatcher(const IStatus* self) throw()
		{
			try
			{
				return static_cast<const Name*>(self)->Name::getCode();
			}
			catch (...)
			{
				Policy::catchException(0);
				return static_cast<int>(0);
			}
		}

		static void CLOOP_CARG cloopsetCodeDispatcher(IStatus* self, int code) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::setCode(code);
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}

		static void CLOOP_CARG cloopdisposeDispatcher(IDisposable* self) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::dispose();
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}
	};

	template <typename Name, typename Base = IDisposableImpl<Name, Inherit<IStatus> > >
	class IStatusImpl : public IStatusBaseImpl<Name, Base>
	{
	protected:
		IStatusImpl(DoNotInherit = DoNotInherit())
		{
		}

	public:
		virtual ~IStatusImpl()
		{
		}

		virtual int getCode() const = 0;
		virtual void setCode(int code) = 0;
	};

	template <typename Name, typename Base>
	class IFactoryBaseImpl : public Base
	{
	public:
		typedef IFactory Declaration;

		IFactoryBaseImpl(DoNotInherit = DoNotInherit())
		{
			static struct VTableImpl : Base::VTable
			{
				VTableImpl()
				{
					this->version = Base::VERSION;
					this->dispose = &Name::cloopdisposeDispatcher;
					this->createStatus = &Name::cloopcreateStatusDispatcher;
					this->createCalculator = &Name::cloopcreateCalculatorDispatcher;
					this->createCalculator2 = &Name::cloopcreateCalculator2Dispatcher;
					this->createBrokenCalculator = &Name::cloopcreateBrokenCalculatorDispatcher;
				}
			} vTable;

			this->cloopVTable = &vTable;
		}

		static IStatus* CLOOP_CARG cloopcreateStatusDispatcher(IFactory* self) throw()
		{
			try
			{
				return static_cast<Name*>(self)->Name::createStatus();
			}
			catch (...)
			{
				Policy::catchException(0);
				return static_cast<IStatus*>(0);
			}
		}

		static ICalculator* CLOOP_CARG cloopcreateCalculatorDispatcher(IFactory* self, IStatus* status) throw()
		{
			try
			{
				return static_cast<Name*>(self)->Name::createCalculator(status);
			}
			catch (...)
			{
				Policy::catchException(status);
				return static_cast<ICalculator*>(0);
			}
		}

		static ICalculator2* CLOOP_CARG cloopcreateCalculator2Dispatcher(IFactory* self, IStatus* status) throw()
		{
			try
			{
				return static_cast<Name*>(self)->Name::createCalculator2(status);
			}
			catch (...)
			{
				Policy::catchException(status);
				return static_cast<ICalculator2*>(0);
			}
		}

		static ICalculator* CLOOP_CARG cloopcreateBrokenCalculatorDispatcher(IFactory* self, IStatus* status) throw()
		{
			try
			{
				return static_cast<Name*>(self)->Name::createBrokenCalculator(status);
			}
			catch (...)
			{
				Policy::catchException(status);
				return static_cast<ICalculator*>(0);
			}
		}

		static void CLOOP_CARG cloopdisposeDispatcher(IDisposable* self) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::dispose();
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}
	};

	template <typename Name, typename Base = IDisposableImpl<Name, Inherit<IFactory> > >
	class IFactoryImpl : public IFactoryBaseImpl<Name, Base>
	{
	protected:
		IFactoryImpl(DoNotInherit = DoNotInherit())
		{
		}

	public:
		virtual ~IFactoryImpl()
		{
		}

		virtual IStatus* createStatus() = 0;
		virtual ICalculator* createCalculator(IStatus* status) = 0;
		virtual ICalculator2* createCalculator2(IStatus* status) = 0;
		virtual ICalculator* createBrokenCalculator(IStatus* status) = 0;
	};

	template <typename Name, typename Base>
	class ICalculatorBaseImpl : public Base
	{
	public:
		typedef ICalculator Declaration;

		ICalculatorBaseImpl(DoNotInherit = DoNotInherit())
		{
			static struct VTableImpl : Base::VTable
			{
				VTableImpl()
				{
					this->version = Base::VERSION;
					this->dispose = &Name::cloopdisposeDispatcher;
					this->sum = &Name::cloopsumDispatcher;
					this->getMemory = &Name::cloopgetMemoryDispatcher;
					this->setMemory = &Name::cloopsetMemoryDispatcher;
					this->sumAndStore = &Name::cloopsumAndStoreDispatcher;
				}
			} vTable;

			this->cloopVTable = &vTable;
		}

		static int CLOOP_CARG cloopsumDispatcher(const ICalculator* self, IStatus* status, int n1, int n2) throw()
		{
			try
			{
				return static_cast<const Name*>(self)->Name::sum(status, n1, n2);
			}
			catch (...)
			{
				Policy::catchException(status);
				return static_cast<int>(0);
			}
		}

		static int CLOOP_CARG cloopgetMemoryDispatcher(const ICalculator* self) throw()
		{
			try
			{
				return static_cast<const Name*>(self)->Name::getMemory();
			}
			catch (...)
			{
				Policy::catchException(0);
				return static_cast<int>(0);
			}
		}

		static void CLOOP_CARG cloopsetMemoryDispatcher(ICalculator* self, int n) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::setMemory(n);
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}

		static void CLOOP_CARG cloopsumAndStoreDispatcher(ICalculator* self, IStatus* status, int n1, int n2) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::sumAndStore(status, n1, n2);
			}
			catch (...)
			{
				Policy::catchException(status);
			}
		}

		static void CLOOP_CARG cloopdisposeDispatcher(IDisposable* self) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::dispose();
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}
	};

	template <typename Name, typename Base = IDisposableImpl<Name, Inherit<ICalculator> > >
	class ICalculatorImpl : public ICalculatorBaseImpl<Name, Base>
	{
	protected:
		ICalculatorImpl(DoNotInherit = DoNotInherit())
		{
		}

	public:
		virtual ~ICalculatorImpl()
		{
		}

		virtual int sum(IStatus* status, int n1, int n2) const = 0;
		virtual int getMemory() const = 0;
		virtual void setMemory(int n) = 0;
		virtual void sumAndStore(IStatus* status, int n1, int n2) = 0;
	};

	template <typename Name, typename Base>
	class ICalculator2BaseImpl : public Base
	{
	public:
		typedef ICalculator2 Declaration;

		ICalculator2BaseImpl(DoNotInherit = DoNotInherit())
		{
			static struct VTableImpl : Base::VTable
			{
				VTableImpl()
				{
					this->version = Base::VERSION;
					this->dispose = &Name::cloopdisposeDispatcher;
					this->sum = &Name::cloopsumDispatcher;
					this->getMemory = &Name::cloopgetMemoryDispatcher;
					this->setMemory = &Name::cloopsetMemoryDispatcher;
					this->sumAndStore = &Name::cloopsumAndStoreDispatcher;
					this->multiply = &Name::cloopmultiplyDispatcher;
					this->copyMemory = &Name::cloopcopyMemoryDispatcher;
					this->copyMemory2 = &Name::cloopcopyMemory2Dispatcher;
				}
			} vTable;

			this->cloopVTable = &vTable;
		}

		static int CLOOP_CARG cloopmultiplyDispatcher(const ICalculator2* self, IStatus* status, int n1, int n2) throw()
		{
			try
			{
				return static_cast<const Name*>(self)->Name::multiply(status, n1, n2);
			}
			catch (...)
			{
				Policy::catchException(status);
				return static_cast<int>(0);
			}
		}

		static void CLOOP_CARG cloopcopyMemoryDispatcher(ICalculator2* self, const ICalculator* calculator) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::copyMemory(calculator);
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}

		static void CLOOP_CARG cloopcopyMemory2Dispatcher(ICalculator2* self, const int* address) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::copyMemory2(address);
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}

		static int CLOOP_CARG cloopsumDispatcher(const ICalculator* self, IStatus* status, int n1, int n2) throw()
		{
			try
			{
				return static_cast<const Name*>(self)->Name::sum(status, n1, n2);
			}
			catch (...)
			{
				Policy::catchException(status);
				return static_cast<int>(0);
			}
		}

		static int CLOOP_CARG cloopgetMemoryDispatcher(const ICalculator* self) throw()
		{
			try
			{
				return static_cast<const Name*>(self)->Name::getMemory();
			}
			catch (...)
			{
				Policy::catchException(0);
				return static_cast<int>(0);
			}
		}

		static void CLOOP_CARG cloopsetMemoryDispatcher(ICalculator* self, int n) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::setMemory(n);
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}

		static void CLOOP_CARG cloopsumAndStoreDispatcher(ICalculator* self, IStatus* status, int n1, int n2) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::sumAndStore(status, n1, n2);
			}
			catch (...)
			{
				Policy::catchException(status);
			}
		}

		static void CLOOP_CARG cloopdisposeDispatcher(IDisposable* self) throw()
		{
			try
			{
				static_cast<Name*>(self)->Name::dispose();
			}
			catch (...)
			{
				Policy::catchException(0);
			}
		}
	};

	template <typename Name, typename Base = ICalculatorImpl<Name, Inherit<IDisposableImpl<Name, Inherit<ICalculator2> > > > >
	class ICalculator2Impl : public ICalculator2BaseImpl<Name, Base>
	{
	protected:
		ICalculator2Impl(DoNotInherit = DoNotInherit())
		{
		}

	public:
		virtual ~ICalculator2Impl()
		{
		}

		virtual int multiply(IStatus* status, int n1, int n2) const = 0;
		virtual void copyMemory(const ICalculator* calculator) = 0;
		virtual void copyMemory2(const int* address) = 0;
	};
};

template <typename Policy> const int CalcApi<Policy>::IStatus::ERROR_1;
template <typename Policy> const int CalcApi<Policy>::IStatus::ERROR_2;
template <typename Policy> const int CalcApi<Policy>::IStatus::ERROR_12;


#endif	// CALC_CPP_API_H
