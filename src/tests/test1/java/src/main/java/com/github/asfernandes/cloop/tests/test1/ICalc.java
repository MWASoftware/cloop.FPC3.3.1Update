// This file was autogenerated by cloop - Cross Language Object Oriented Programming

package com.github.asfernandes.cloop.tests.test1;


public interface ICalc extends com.sun.jna.Library
{
	public static abstract class IDisposable extends com.sun.jna.Structure
	{
		public static class VTable extends com.sun.jna.Structure implements com.sun.jna.Structure.ByReference
		{
			public static interface Callback_dispose extends com.sun.jna.Callback
			{
				public void invoke(IDisposable self);
			}

			public com.sun.jna.Pointer cloopDummy;
			public com.sun.jna.Pointer version;

			public Callback_dispose dispose;

			@Override
			protected java.util.List<String> getFieldOrder()
			{
				java.util.List<String> fields = new java.util.ArrayList<String>();
				fields.addAll(java.util.Arrays.asList("cloopDummy", "version", "dispose"));
				return fields;
			}
		}

		public void dispose()
		{
			VTable vTable = getVTable();
			vTable.dispose.invoke(this);
		}

		public com.sun.jna.Pointer cloopDummy;

		@Override
		protected java.util.List<String> getFieldOrder()
		{
			java.util.List<String> fields = new java.util.ArrayList<String>();
			fields.addAll(java.util.Arrays.asList("cloopDummy", "cloopVTable"));
			return fields;
		}

		public abstract <T extends VTable> T getVTable();
	}

	public static class IDisposableImpl extends IDisposable
	{
		public VTable cloopVTable;

		@SuppressWarnings("unchecked")
		@Override
		public <T extends IDisposable.VTable> T getVTable()
		{
			return (T) cloopVTable;
		}
	}

	public static abstract class IStatus extends IDisposable
	{
		public static int ERROR_1 = 1;
		public static int ERROR_2 = 2;
		public static int ERROR_12 = IStatus.ERROR_1 | IStatus.ERROR_2;

		public static class VTable extends IDisposable.VTable
		{
			public static interface Callback_getCode extends com.sun.jna.Callback
			{
				public int invoke(IStatus self);
			}

			public static interface Callback_setCode extends com.sun.jna.Callback
			{
				public void invoke(IStatus self, int code);
			}

			public Callback_getCode getCode;
			public Callback_setCode setCode;

			@Override
			protected java.util.List<String> getFieldOrder()
			{
				java.util.List<String> fields = super.getFieldOrder();
				fields.addAll(java.util.Arrays.asList("getCode", "setCode"));
				return fields;
			}
		}

		public int getCode()
		{
			VTable vTable = getVTable();
			int result = vTable.getCode.invoke(this);
			return result;
		}

		public void setCode(int code)
		{
			VTable vTable = getVTable();
			vTable.setCode.invoke(this, code);
		}
	}

	public static class IStatusImpl extends IStatus
	{
		public VTable cloopVTable;

		@SuppressWarnings("unchecked")
		@Override
		public <T extends IDisposable.VTable> T getVTable()
		{
			return (T) cloopVTable;
		}
	}

	public static abstract class IFactory extends IDisposable
	{
		public static class VTable extends IDisposable.VTable
		{
			public static interface Callback_createStatus extends com.sun.jna.Callback
			{
				public IStatusImpl invoke(IFactory self);
			}

			public static interface Callback_createCalculator extends com.sun.jna.Callback
			{
				public ICalculatorImpl invoke(IFactory self, IStatus status);
			}

			public static interface Callback_createCalculator2 extends com.sun.jna.Callback
			{
				public ICalculator2Impl invoke(IFactory self, IStatus status);
			}

			public static interface Callback_createBrokenCalculator extends com.sun.jna.Callback
			{
				public ICalculatorImpl invoke(IFactory self, IStatus status);
			}

			public Callback_createStatus createStatus;
			public Callback_createCalculator createCalculator;
			public Callback_createCalculator2 createCalculator2;
			public Callback_createBrokenCalculator createBrokenCalculator;

			@Override
			protected java.util.List<String> getFieldOrder()
			{
				java.util.List<String> fields = super.getFieldOrder();
				fields.addAll(java.util.Arrays.asList("createStatus", "createCalculator", "createCalculator2", "createBrokenCalculator"));
				return fields;
			}
		}

		public IStatusImpl createStatus()
		{
			VTable vTable = getVTable();
			IStatusImpl result = vTable.createStatus.invoke(this);
			return result;
		}

		public ICalculatorImpl createCalculator(IStatus status) throws CalcException
		{
			VTable vTable = getVTable();
			ICalculatorImpl result = vTable.createCalculator.invoke(this, status);
			CalcException.checkException(status);
			return result;
		}

		public ICalculator2Impl createCalculator2(IStatus status) throws CalcException
		{
			VTable vTable = getVTable();
			ICalculator2Impl result = vTable.createCalculator2.invoke(this, status);
			CalcException.checkException(status);
			return result;
		}

		public ICalculatorImpl createBrokenCalculator(IStatus status) throws CalcException
		{
			VTable vTable = getVTable();
			ICalculatorImpl result = vTable.createBrokenCalculator.invoke(this, status);
			CalcException.checkException(status);
			return result;
		}
	}

	public static class IFactoryImpl extends IFactory
	{
		public VTable cloopVTable;

		@SuppressWarnings("unchecked")
		@Override
		public <T extends IDisposable.VTable> T getVTable()
		{
			return (T) cloopVTable;
		}
	}

	public static abstract class ICalculator extends IDisposable
	{
		public static class VTable extends IDisposable.VTable
		{
			public static interface Callback_sum extends com.sun.jna.Callback
			{
				public int invoke(ICalculator self, IStatus status, int n1, int n2);
			}

			public static interface Callback_getMemory extends com.sun.jna.Callback
			{
				public int invoke(ICalculator self);
			}

			public static interface Callback_setMemory extends com.sun.jna.Callback
			{
				public void invoke(ICalculator self, int n);
			}

			public static interface Callback_sumAndStore extends com.sun.jna.Callback
			{
				public void invoke(ICalculator self, IStatus status, int n1, int n2);
			}

			public Callback_sum sum;
			public Callback_getMemory getMemory;
			public Callback_setMemory setMemory;
			public Callback_sumAndStore sumAndStore;

			@Override
			protected java.util.List<String> getFieldOrder()
			{
				java.util.List<String> fields = super.getFieldOrder();
				fields.addAll(java.util.Arrays.asList("sum", "getMemory", "setMemory", "sumAndStore"));
				return fields;
			}
		}

		public int sum(IStatus status, int n1, int n2) throws CalcException
		{
			VTable vTable = getVTable();
			int result = vTable.sum.invoke(this, status, n1, n2);
			CalcException.checkException(status);
			return result;
		}

		public int getMemory()
		{
			VTable vTable = getVTable();
			int result = vTable.getMemory.invoke(this);
			return result;
		}

		public void setMemory(int n)
		{
			VTable vTable = getVTable();
			vTable.setMemory.invoke(this, n);
		}

		public void sumAndStore(IStatus status, int n1, int n2) throws CalcException
		{
			VTable vTable = getVTable();
			vTable.sumAndStore.invoke(this, status, n1, n2);
			CalcException.checkException(status);
		}
	}

	public static class ICalculatorImpl extends ICalculator
	{
		public VTable cloopVTable;

		@SuppressWarnings("unchecked")
		@Override
		public <T extends IDisposable.VTable> T getVTable()
		{
			return (T) cloopVTable;
		}
	}

	public static abstract class ICalculator2 extends ICalculator
	{
		public static class VTable extends ICalculator.VTable
		{
			public static interface Callback_multiply extends com.sun.jna.Callback
			{
				public int invoke(ICalculator2 self, IStatus status, int n1, int n2);
			}

			public static interface Callback_copyMemory extends com.sun.jna.Callback
			{
				public void invoke(ICalculator2 self, ICalculator calculator);
			}

			public static interface Callback_copyMemory2 extends com.sun.jna.Callback
			{
				public void invoke(ICalculator2 self, int[] address);
			}

			public Callback_multiply multiply;
			public Callback_copyMemory copyMemory;
			public Callback_copyMemory2 copyMemory2;

			@Override
			protected java.util.List<String> getFieldOrder()
			{
				java.util.List<String> fields = super.getFieldOrder();
				fields.addAll(java.util.Arrays.asList("multiply", "copyMemory", "copyMemory2"));
				return fields;
			}
		}

		public int multiply(IStatus status, int n1, int n2) throws CalcException
		{
			VTable vTable = getVTable();
			int result = vTable.multiply.invoke(this, status, n1, n2);
			CalcException.checkException(status);
			return result;
		}

		public void copyMemory(ICalculator calculator)
		{
			VTable vTable = getVTable();
			vTable.copyMemory.invoke(this, calculator);
		}

		public void copyMemory2(int[] address)
		{
			VTable vTable = getVTable();
			vTable.copyMemory2.invoke(this, address);
		}
	}

	public static class ICalculator2Impl extends ICalculator2
	{
		public VTable cloopVTable;

		@SuppressWarnings("unchecked")
		@Override
		public <T extends IDisposable.VTable> T getVTable()
		{
			return (T) cloopVTable;
		}
	}
}
